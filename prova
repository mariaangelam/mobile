import React, { useState, createContext, useContext } from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { NavigationContainer } from '@react-navigation/native';
import { View, Text, TextInput, Button, TouchableOpacity, StyleSheet, FlatList } from 'react-native';

//mi serve per passare gli Eventi tra i vari componenti
const EventsContext = createContext();

//schermata statistiche
const Statistiche = () => {
  return (
    <View>
      <Text>Statistics Screen</Text>
    </View>
  );
};
//schermata Gestisci Evento
const GestisciEvento = () => {
  return (
    <View>
      <Text>Edit Screen</Text>
    </View>
  );
};

//Schermata eventi: 
const Eventi = () => {
//userÃ² Context per memorizzare in events i dati dei vari Eventi
  const { events } = useContext(EventsContext);

//come decido di mostrarli in output: in una box di colore viola
//titolo in grassetto e descrizione in corsivo
  const renderEvento = ({ item }) => (
    <View style={styles.eventContainer}>
      <Text style={styles.eventTitle}>{item.titolo}</Text>
      <Text style={styles.eventDate}>{item.data}</Text>
      <Text style={styles.eventDescription}>{item.descrizione}</Text>
    </View>
  );
//Ritorno una vista che contiene una flatlist che come dati contiene tutti i dati gli eventi (array di //eventi),
//utilizza renderItem per mostrare in output i dati in un certo modo, utilizza la funzione renderEvento viene utilizzata per renderizzare ciascun elemento della lista.
//estrae una chiave per identificare in modo univoco ogni evento della lista
  return (
    <View style={styles.container}>
      <Text>Schermata Eventi</Text>
      <FlatList
        data={events}
        renderItem={renderEvento}
        keyExtractor={(item, index) => index.toString()}
      />
    </View>
  );
};

const AggiungiEvento = ({ navigation }) => {
  const { addEvent } = useContext(EventsContext);
  const [titolo, setTitolo] = useState('');
  const [dataSelezionata, setDataSelezionata] = useState('');
  const [descrizione, setDescrizione] = useState('');

  const handleSubmit = () => {
    // Gestisci la data inserita dall'utente
    console.log('Data inserita:', dataSelezionata);
  };

  const handleChange = (text) => {
    setDataSelezionata(text);
  };

  const handleAggiungiEvento = () => {
    const nuovoEvento = { titolo, data: dataSelezionata, descrizione };
    addEvent(nuovoEvento);
    navigation.goBack();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Titolo:</Text>
      <TextInput
        style={styles.input}
        value={titolo}
        onChangeText={setTitolo}
        placeholder="Inserisci il titolo"
        placeholderTextColor="#888"
      />
      <Text style={styles.label}>Data:</Text>
  <TextInput
  style={styles.input}
  placeholder="Inserisci la data (DD/MM/YYYY)"
  value={dataSelezionata}
  maxLength={10} // Imposta la lunghezza massima del campo di input
  keyboardType="numeric" // Imposta la tastiera numerica per il campo di input
  onChangeText={(text) => {
    if ((text.length === 2 || text.length === 5) && text.length > dataSelezionata.length) {
      setDataSelezionata(text + '/');
    } else {
      setDataSelezionata(text);
    }
  }}
/>

      <Button title="Conferma" onPress={handleSubmit} />

      <Text style={styles.label}>Descrizione:</Text>
      <TextInput
        style={[styles.input, styles.textArea]}
        value={descrizione}
        onChangeText={setDescrizione}
        placeholder="Inserisci la descrizione"
        placeholderTextColor="#888"
        multiline={true}
        numberOfLines={4}
      />
      <Button title="Aggiungi Evento" onPress={handleAggiungiEvento} />
    </View>
  );
};



const Dashboard = ({ navigation }) => {
  const { events } = useContext(EventsContext);

  const renderEvento = ({ item }) => (
    <View style={styles.eventContainer}>
      <Text style={styles.eventTitle}>{item.titolo}</Text>
      <Text style={styles.eventDate}>{item.data}</Text>
      <Text style={styles.eventDescription}>{item.descrizione}</Text>
    </View>
  );

  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.title}>Qui verranno mostrati tutti gli eventi</Text>
      <FlatList
        data={events}
        renderItem={renderEvento}
        keyExtractor={(item, index) => index.toString()}
      />
      <TouchableOpacity
        style={styles.addButton}
        onPress={() => navigation.navigate('AggiungiEvento')}
      >
        <MaterialCommunityIcons name="plus" color="#fff" size={24} />
      </TouchableOpacity>
    </View>
  );
};


const Notifiche = () => {
  return (
    <View>
      <Text>Schermata Notifiche</Text>
    </View>
  );
};

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

const TabNavigator = () => {
  return (
    <Tab.Navigator
      initialRouteName="Dashboard"
      screenOptions={{
        tabBarActiveTintColor: '#6200ea',
        tabBarInactiveTintColor: 'gray',
        tabBarStyle: { backgroundColor: '#ffff' },
      }}
    >
      <Tab.Screen
        name="Dashboard"
        component={Dashboard}
        options={{
          tabBarLabel: 'Dashboard',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="view-dashboard" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Eventi"
        component={Eventi}
        options={{
          tabBarLabel: 'Eventi',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="calendar" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Modifica Evento"
        component={GestisciEvento}
        options={{
          tabBarLabel: 'Modifica',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="pencil" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Statistiche"
        component={Statistiche}
        options={{
          tabBarLabel: 'Statistiche',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="chart-bar" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Notifiche"
        component={Notifiche}
        options={{
          tabBarLabel: 'Notifiche',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="bell" color={color} size={size} />
          ),
          tabBarBadge: 3,
        }}
      />
    </Tab.Navigator>
  );
};

const App = () => {
  const [events, setEvents] = useState([]);

  const addEvent = (newEvent) => {
    setEvents([...events, newEvent]);
  };

  return (
    <EventsContext.Provider value={{ events, addEvent }}>
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen
            name="Main"
            component={TabNavigator}
            options={{ headerShown: false }}
          />
          <Stack.Screen
            name="AggiungiEvento"
            component={AggiungiEvento}
            options={{ title: 'Aggiungi Evento' }}
          />
        </Stack.Navigator>
      </NavigationContainer>
    </EventsContext.Provider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  label: {
    fontSize: 16,
    marginVertical: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    backgroundColor: '#fff',
    marginBottom: 12,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    margin: 20,
  },
  addButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#6200ea',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },

  eventContainer: {
    marginBottom: 10,
    padding: 10,
    borderRadius: 8,
    backgroundColor: '#e6e6fa',
        marginLeft: 20, // Aggiungi spazio vuoto a sinistra
    marginRight: 20, // Aggiungi spazio vuoto a destra
  },

    eventTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
});


export default App;



