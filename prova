import React, { useState, createContext, useContext } from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { View, Text, TextInput, Button, TouchableOpacity, StyleSheet, FlatList } from 'react-native';
import { isValid, parseISO } from 'date-fns';

const EventsContext = createContext();

const Statistiche = () => (
  <View>
    <Text>Schermata Statistiche</Text>
  </View>
);

const GestisciEvento = () => (
  <View>
    <Text>Schermata Gestisci Evento</Text>
  </View>
);

const Eventi = () => {
  const { events } = useContext(EventsContext);

  const renderEvento = ({ item }) => (
    <View style={styles.eventContainer}>
      <Text style={styles.eventTitle}>{item.titolo}</Text>
      <Text style={styles.eventDate}>{item.data.toLocaleDateString()}</Text>
      <Text style={styles.eventDescription}>{item.descrizione}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text>Schermata Eventi</Text>
      <FlatList
        data={events}
        renderItem={renderEvento}
        keyExtractor={(item, index) => index.toString()}
      />
    </View>
  );
};

const AggiungiEvento = ({ navigation }) => {
  const { addEvent } = useContext(EventsContext);
  const [titolo, setTitolo] = useState('');
  const [dataSelezionata, setDataSelezionata] = useState('');
  const [descrizione, setDescrizione] = useState('');

 const handleAggiungiEvento = () => {
  const dataFormattata = dataSelezionata.split('/');
  const giorno = parseInt(dataFormattata[0], 10);
  const mese = parseInt(dataFormattata[1], 10);
  const anno = parseInt(dataFormattata[2], 10);

  // Verifichiamo la validità della data
  if (isNaN(giorno) || isNaN(mese) || isNaN(anno)) {
    console.error('Data non valida');
    return;
  }

  // Verifichiamo la validità del mese
  if (mese < 1 || mese > 12) {
    console.error('Mese non valido');
    return;
  }

  // Verifichiamo la validità del giorno
  const giorniInMese = new Date(anno, mese, 0).getDate();
  if (giorno < 1 || giorno > giorniInMese) {
    console.error('Giorno non valido');
    return;
  }

  // Creiamo la nuova data
  const nuovaData = new Date(anno, mese - 1, giorno);
 
    const nuovoEvento = { titolo, data: nuovaData, descrizione };
    addEvent(nuovoEvento);
    navigation.goBack();
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Titolo:</Text>
      <TextInput
        style={styles.input}
        value={titolo}
        onChangeText={setTitolo}
        placeholder="Inserisci il titolo"
        placeholderTextColor="#888"
      />
      <Text style={styles.label}>Data:</Text>
      <TextInput
        style={styles.input}
        placeholder="Inserisci la data (DD/MM/YYYY)"
        value={dataSelezionata}
        maxLength={10}
        keyboardType="numeric"
        onChangeText={(text) => {
          if ((text.length === 2 || text.length === 5) && text.length > dataSelezionata.length) {
            setDataSelezionata(text + '/');
          } else {
            setDataSelezionata(text);
          }
        }}
      />
      <Text style={styles.label}>Descrizione:</Text>
      <TextInput
        style={[styles.input, styles.textArea]}
        value={descrizione}
        onChangeText={setDescrizione}
        placeholder="Inserisci la descrizione"
        placeholderTextColor="#888"
        multiline={true}
        numberOfLines={4}
      />
      <Button title="Aggiungi Evento" onPress={handleAggiungiEvento} />
    </View>
  );
};

const TopTab = createMaterialTopTabNavigator();

const Dashboard = ({ navigation }) => {
  const { events } = useContext(EventsContext);

  const renderEvento = ({ item }) => (
    <View style={styles.eventContainer}>
      <Text style={styles.eventTitle}>{item.titolo}</Text>
      <Text style={styles.eventDate}>{item.data.toLocaleDateString()}</Text>
      <Text style={styles.eventDescription}>{item.descrizione}</Text>
    </View>
  );

  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.title}>Qui verranno mostrati tutti gli eventi</Text>
      <TopTab.Navigator
        screenOptions={{
          tabBarActiveTintColor: '#fff',
          tabBarInactiveTintColor: '#ccc',
          tabBarStyle: { backgroundColor: '#6200ea' },
          tabBarIndicatorStyle: { backgroundColor: '#fff' },
        }}
      >
        <TopTab.Screen name="Eventi Passati" component={() => (
          <View style={styles.tabContainer}>
            <FlatList
              data={events.filter(event => event.data < new Date())}
              renderItem={renderEvento}
              keyExtractor={(item, index) => index.toString()}
            />
          </View>
        )} />
        <TopTab.Screen name="Eventi Futuri" component={() => (
          <View style={styles.tabContainer}>
            <FlatList
              data={events.filter(event => event.data >= new Date())}
              renderItem={renderEvento}
              keyExtractor={(item, index) => index.toString()}
            />
          </View>
        )} />
      </TopTab.Navigator>
      <TouchableOpacity
        style={styles.addButton}
        onPress={() => navigation.navigate('AggiungiEvento')}
      >
        <MaterialCommunityIcons name="plus" color="#fff" size={24} />
      </TouchableOpacity>
    </View>
  );
};
const Notifiche = () => (
  <View>
    <Text>Schermata Notifiche</Text>
  </View>
);

const BottomTab = createBottomTabNavigator();

const TabNavigator = () => (
  <BottomTab.Navigator
    initialRouteName="Dashboard"
    screenOptions={{
      tabBarActiveTintColor: '#6200ea',
      tabBarInactiveTintColor: 'gray',
      tabBarStyle: { backgroundColor: '#ffff' },
    }}
  >
    <BottomTab.Screen
      name="Dashboard"
      component={Dashboard}
      options={{
        tabBarLabel: 'Dashboard',
        tabBarIcon: ({ color, size }) => (
          <MaterialCommunityIcons name="view-dashboard" color={color} size={size} />
        ),
      }}
    />
    <BottomTab.Screen
      name="Eventi"
      component={Eventi}
      options={{
        tabBarLabel: 'Eventi',
        tabBarIcon: ({ color, size }) => (
          <MaterialCommunityIcons name="calendar" color={color} size={size} />
        ),
      }}
    />
    <BottomTab.Screen
      name="Modifica Evento"
      component={GestisciEvento}
      options={{
        tabBarLabel: 'Modifica',
        tabBarIcon: ({ color, size }) => (
          <MaterialCommunityIcons name="pencil" color={color} size={size} />
        ),
      }}
    />
    <BottomTab.Screen
      name="Statistiche"
      component={Statistiche}
      options={{
        tabBarLabel: 'Statistiche',
        tabBarIcon: ({ color, size }) => (
          <MaterialCommunityIcons name="chart-bar" color={color} size={size} />
        ),
      }}
    />
    <BottomTab.Screen
      name="Notifiche"
      component={Notifiche}
      options={{
        tabBarLabel: 'Notifiche',
        tabBarIcon: ({ color, size }) => (
          <MaterialCommunityIcons name="bell" color={color} size={size} />
        ),
        tabBarBadge: 3,
      }}
    />
  </BottomTab.Navigator>
);

const Stack = createStackNavigator();

const App = () => {
  const [events, setEvents] = useState([]);

  const addEvent = (newEvent) => {
    setEvents([...events, newEvent]);
  };

  return (
    <EventsContext.Provider value={{ events, addEvent }}>
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen
            name="Main"
            component={TabNavigator}
            options={{ headerShown: false }}
          />
          <Stack.Screen
            name="AggiungiEvento"
            component={AggiungiEvento}
            options={{ title: 'Aggiungi Evento' }}
          />
        </Stack.Navigator>
      </NavigationContainer>
    </EventsContext.Provider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },

  label: {
    fontSize: 16,
    marginVertical: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    backgroundColor: '#fff',
    marginBottom: 12,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    margin: 20,
  },
  addButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#6200ea',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
  eventContainer: {
    marginBottom: 10,
    padding: 10,
    borderRadius: 8,
    backgroundColor: '#e6e6fa',
    marginLeft: 20,
    marginRight: 20,
  },
  eventTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  eventDate: {
    fontSize: 14,
    color: '#666',
  },
  eventDescription: {
    fontSize: 14,
  },
});

export default App;

